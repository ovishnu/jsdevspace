(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.minim = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var negate = require('lodash/negate');

// Coerces an a parameter into a callback for matching elements.
// This accepts an element name, an element type and returns a
// callback to match for those elements.
function coerceElementMatchingCallback(value) {
  // Element Name
  if (typeof value === 'string') {
    return function (element) {
      return element.element === value;
    };
  }

  // Element Type
  if (value.constructor && value.extend) {
    return function (element) {
      return element instanceof value;
    };
  }

  return value;
}

/**
 * @class
 *
 * @param {Element[]} elements
 *
 * @property {Element[]} elements
 */

var ArraySlice = function () {
  function ArraySlice(elements) {
    _classCallCheck(this, ArraySlice);

    this.elements = elements || [];
  }

  /**
   * @returns {Array}
   */

  _createClass(ArraySlice, [{
    key: 'toValue',
    value: function toValue() {
      return this.elements.map(function (element) {
        return element.toValue();
      });
    }

    // High Order Functions

    /**
     * @param callback - Function to execute for each element
     * @param thisArg - Value to use as this (i.e the reference Object) when executing callback
     * @returns {array} A new array with each element being the result of the callback function
     */

  }, {
    key: 'map',
    value: function map(callback, thisArg) {
      return this.elements.map(callback, thisArg);
    }

    /**
     * Maps and then flattens the results.
     * @param callback - Function to execute for each element.
     * @param thisArg - Value to use as this (i.e the reference Object) when executing callback
     * @returns {array}
     */

  }, {
    key: 'flatMap',
    value: function flatMap(callback, thisArg) {
      return this.map(callback, thisArg).reduce(function (a, b) {
        return a.concat(b);
      }, []);
    }

    /**
     * Returns an array containing the truthy results of calling the given transformation with each element of this sequence
     * @param transform - A closure that accepts an element of this array as its argument and returns an optional value.
     * @param thisArg - Value to use as this (i.e the reference Object) when executing callback
     * @memberof ArraySlice.prototype
     * @returns An array of the non-undefined results of calling transform with each element of the array
     */

  }, {
    key: 'compactMap',
    value: function compactMap(transform, thisArg) {
      var results = [];

      this.forEach(function (element) {
        var result = transform.bind(thisArg)(element);

        if (result) {
          results.push(result);
        }
      });

      return results;
    }

    /**
     * @param callback - Function to execute for each element. This may be a callback, an element name or an element class.
     * @param thisArg - Value to use as this (i.e the reference Object) when executing callback
     * @returns {ArraySlice}
     * @memberof ArraySlice.prototype
     */

  }, {
    key: 'filter',
    value: function filter(callback, thisArg) {
      callback = coerceElementMatchingCallback(callback);
      return new ArraySlice(this.elements.filter(callback, thisArg));
    }

    /**
     * @param callback - Function to execute for each element. This may be a callback, an element name or an element class.
     * @param thisArg - Value to use as this (i.e the reference Object) when executing callback
     * @returns {ArraySlice}
     * @memberof ArraySlice.prototype
     */

  }, {
    key: 'reject',
    value: function reject(callback, thisArg) {
      callback = coerceElementMatchingCallback(callback);
      return new ArraySlice(this.elements.filter(negate(callback), thisArg));
    }

    /**
     * Returns the first element in the array that satisfies the given value
     * @param callback - Function to execute for each element. This may be a callback, an element name or an element class.
     * @param thisArg - Value to use as this (i.e the reference Object) when executing callback
     * @returns {Element}
     * @memberof ArraySlice.prototype
     */

  }, {
    key: 'find',
    value: function find(callback, thisArg) {
      callback = coerceElementMatchingCallback(callback);
      return this.elements.find(callback, thisArg);
    }

    /**
     * @param callback - Function to execute for each element
     * @param thisArg - Value to use as this (i.e the reference Object) when executing callback
     * @memberof ArraySlice.prototype
     */

  }, {
    key: 'forEach',
    value: function forEach(callback, thisArg) {
      this.elements.forEach(callback, thisArg);
    }

    /**
     * @param callback - Function to execute for each element
     * @param initialValue
     * @memberof ArraySlice.prototype
     */

  }, {
    key: 'reduce',
    value: function reduce(callback, initialValue) {
      return this.elements.reduce(callback, initialValue);
    }

    /**
     * @param value
     * @returns {boolean}
     * @memberof ArraySlice.prototype
     */

  }, {
    key: 'includes',
    value: function includes(value) {
      return this.elements.some(function (element) {
        return element.equals(value);
      });
    }

    // Mutation

    /**
     * Removes the first element from the slice
     * @returns {Element} The removed element or undefined if the slice is empty
     * @memberof ArraySlice.prototype
     */

  }, {
    key: 'shift',
    value: function shift() {
      return this.elements.shift();
    }

    /**
     * Adds the given element to the begining of the slice
     * @parameter {Element} value
     * @memberof ArraySlice.prototype
     */

  }, {
    key: 'unshift',
    value: function unshift(value) {
      this.elements.unshift(this.refract(value));
    }

    /**
     * Adds the given element to the end of the slice
     * @parameter {Element} value
     * @memberof ArraySlice.prototype
     */

  }, {
    key: 'push',
    value: function push(value) {
      this.elements.push(this.refract(value));
      return this;
    }

    /**
     * @parameter {Element} value
     * @memberof ArraySlice.prototype
     */

  }, {
    key: 'add',
    value: function add(value) {
      this.push(value);
    }

    // Accessors

    /**
     * @parameter {number} index
     * @returns {Element}
     * @memberof ArraySlice.prototype
     */

  }, {
    key: 'get',
    value: function get(index) {
      return this.elements[index];
    }

    /**
     * @parameter {number} index
     * @memberof ArraySlice.prototype
     */

  }, {
    key: 'getValue',
    value: function getValue(index) {
      var element = this.elements[index];

      if (element) {
        return element.toValue();
      }

      return undefined;
    }

    /**
     * Returns the number of elements in the slice
     * @type number
     */

  }, {
    key: 'length',
    get: function get() {
      return this.elements.length;
    }

    /**
     * Returns whether the slice is empty
     * @type boolean
     */

  }, {
    key: 'isEmpty',
    get: function get() {
      return this.elements.length === 0;
    }

    /**
     * Returns the first element in the slice or undefined if the slice is empty
     * @type Element
     */

  }, {
    key: 'first',
    get: function get() {
      return this.elements[0];
    }
  }]);

  return ArraySlice;
}();

if (typeof Symbol !== 'undefined') {
  ArraySlice.prototype[Symbol.iterator] = function symbol() {
    return this.elements[Symbol.iterator]();
  };
}

module.exports = ArraySlice;

},{"lodash/negate":110}],2:[function(require,module,exports){
"use strict";

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/**
 * @class
 *
 * @property {Element} key
 * @property {Element} value
 */
var KeyValuePair = function () {
  function KeyValuePair(key, value) {
    _classCallCheck(this, KeyValuePair);

    this.key = key;
    this.value = value;
  }

  /**
   * @returns {KeyValuePair}
   */

  _createClass(KeyValuePair, [{
    key: "clone",
    value: function clone() {
      var clone = new KeyValuePair();

      if (this.key) {
        clone.key = this.key.clone();
      }

      if (this.value) {
        clone.value = this.value.clone();
      }

      return clone;
    }
  }]);

  return KeyValuePair;
}();

module.exports = KeyValuePair;

},{}],3:[function(require,module,exports){
'use strict';

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var isNull = require('lodash/isNull');
var isString = require('lodash/isString');
var isNumber = require('lodash/isNumber');
var isBoolean = require('lodash/isBoolean');
var isObject = require('lodash/isObject');

var JSONSerialiser = require('./serialisers/JSONSerialiser');
var elements = require('./elements');

/**
 * @class
 *
 * A refract element implementation with an extensible namespace, able to
 * load other namespaces into it.
 *
 * The namespace allows you to register your own classes to be instantiated
 * when a particular refract element is encountered, and allows you to specify
 * which elements get instantiated for existing Javascript objects.
 */

var Namespace = function () {
  function Namespace(options) {
    _classCallCheck(this, Namespace);

    this.elementMap = {};
    this.elementDetection = [];
    this.Element = elements.Element;
    this.KeyValuePair = elements.KeyValuePair;

    if (!options || !options.noDefault) {
      this.useDefault();
    }

    // These provide the defaults for new elements.
    this._attributeElementKeys = [];
    this._attributeElementArrayKeys = [];
  }

  /**
   * Use a namespace plugin or load a generic plugin.
   *
   * @param plugin
   */

  _createClass(Namespace, [{
    key: 'use',
    value: function use(plugin) {
      if (plugin.namespace) {
        plugin.namespace({ base: this });
      }
      if (plugin.load) {
        plugin.load({ base: this });
      }
      return this;
    }

    /*
     * Use the default namespace. This preloads all the default elements
     * into this registry instance.
     */

  }, {
    key: 'useDefault',
    value: function useDefault() {
      // Set up classes for default elements
      this.register('null', elements.NullElement).register('string', elements.StringElement).register('number', elements.NumberElement).register('boolean', elements.BooleanElement).register('array', elements.ArrayElement).register('object', elements.ObjectElement).register('member', elements.MemberElement).register('ref', elements.RefElement).register('link', elements.LinkElement);

      // Add instance detection functions to convert existing objects into
      // the corresponding refract elements.
      this.detect(isNull, elements.NullElement, false).detect(isString, elements.StringElement, false).detect(isNumber, elements.NumberElement, false).detect(isBoolean, elements.BooleanElement, false).detect(Array.isArray, elements.ArrayElement, false).detect(isObject, elements.ObjectElement, false);

      return this;
    }

    /**
     * Register a new element class for an element.
     *
     * @param {string} name
     * @param elementClass
     */

  }, {
    key: 'register',
    value: function register(name, ElementClass) {
      this._elements = undefined;
      this.elementMap[name] = ElementClass;
      return this;
    }

    /**
     * Unregister a previously registered class for an element.
     *
     * @param {string} name
     */

  }, {
    key: 'unregister',
    value: function unregister(name) {
      this._elements = undefined;
      delete this.elementMap[name];
      return this;
    }

    /*
     * Add a new detection function to determine which element
     * class to use when converting existing js instances into
     * refract element.
     */

  }, {
    key: 'detect',
    value: function detect(test, ElementClass, givenPrepend) {
      var prepend = givenPrepend === undefined ? true : givenPrepend;

      if (prepend) {
        this.elementDetection.unshift([test, ElementClass]);
      } else {
        this.elementDetection.push([test, ElementClass]);
      }

      return this;
    }

    /*
     * Convert an existing Javascript object into refract element instances, which
     * can be further processed or serialized into refract.
     * If the item passed in is already refracted, then it is returned
     * unmodified.
     */

  }, {
    key: 'toElement',
    value: function toElement(value) {
      if (value instanceof this.Element) {
        return value;
      }

      var element = void 0;

      for (var i = 0; i < this.elementDetection.length; i += 1) {
        var test = this.elementDetection[i][0];
        var ElementClass = this.elementDetection[i][1];

        if (test(value)) {
          element = new ElementClass(value);
          break;
        }
      }

      return element;
    }

    /*
     * Get an element class given an element name.
     */

  }, {
    key: 'getElementClass',
    value: function getElementClass(element) {
      var ElementClass = this.elementMap[element];

      if (ElementClass === undefined) {
        // Fall back to the base element. We may not know what
        // to do with the `content`, but downstream software
        // may know.
        return this.Element;
      }

      return ElementClass;
    }

    /*
     * Convert a refract document into refract element instances.
     */

  }, {
    key: 'fromRefract',
    value: function fromRefract(doc) {
      return this.serialiser.deserialise(doc);
    }

    /*
     * Convert an element to a Refracted JSON object.
     */

  }, {
    key: 'toRefract',
    value: function toRefract(element) {
      return this.serialiser.serialise(element);
    }

    /*
     * Get an object that contains all registered element classes, where
     * the key is the PascalCased element name and the value is the class.
     */

  }, {
    key: 'elements',
    get: function get() {
      var _this = this;

      if (this._elements === undefined) {
        this._elements = {
          Element: this.Element
        };

        Object.keys(this.elementMap).forEach(function (name) {
          // Currently, all registered element types use a camelCaseName.
          // Converting to PascalCase is as simple as upper-casing the first
          // letter.
          var pascal = name[0].toUpperCase() + name.substr(1);
          _this._elements[pascal] = _this.elementMap[name];
        });
      }

      return this._elements;
    }

    /**
     * Convinience method for getting a JSON Serialiser configured with the
     * current namespace
     *
     * @type JSONSerialiser
     * @readonly
     *
     * @memberof Namespace.prototype
     */

  }, {
    key: 'serialiser',
    get: function get() {
      return new JSONSerialiser(this);
    }
  }]);

  return Namespace;
}();

JSONSerialiser.prototype.Namespace = Namespace;

module.exports = Namespace;

},{"./elements":5,"./serialisers/JSONSerialiser":18,"lodash/isBoolean":98,"lodash/isNull":103,"lodash/isNumber":104,"lodash/isObject":105,"lodash/isString":107}],4:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var negate = require('lodash/negate');
var ArraySlice = require('./ArraySlice');

/**
 */

var ObjectSlice = function (_ArraySlice) {
  _inherits(ObjectSlice, _ArraySlice);

  function ObjectSlice() {
    _classCallCheck(this, ObjectSlice);

    return _possibleConstructorReturn(this, (ObjectSlice.__proto__ || Object.getPrototypeOf(ObjectSlice)).apply(this, arguments));
  }

  _createClass(ObjectSlice, [{
    key: 'map',
    value: function map(callback, thisArg) {
      return this.elements.map(function (member) {
        return callback.bind(thisArg)(member.value, member.key, member);
      });
    }
  }, {
    key: 'filter',
    value: function filter(callback, thisArg) {
      return new ObjectSlice(this.elements.filter(function (member) {
        return callback.bind(thisArg)(member.value, member.key, member);
      }));
    }
  }, {
    key: 'reject',
    value: function reject(callback, thisArg) {
      return this.filter(negate(callback.bind(thisArg)));
    }
  }, {
    key: 'forEach',
    value: function forEach(callback, thisArg) {
      return this.elements.forEach(function (member, index) {
        callback.bind(thisArg)(member.value, member.key, member, index);
      });
    }

    /**
     * @returns {array}
     */

  }, {
    key: 'keys',
    value: function keys() {
      return this.map(function (value, key) {
        return key.toValue();
      });
    }

    /**
     * @returns {array}
     */

  }, {
    key: 'values',
    value: function values() {
      return this.map(function (value) {
        return value.toValue();
      });
    }
  }]);

  return ObjectSlice;
}(ArraySlice);

module.exports = ObjectSlice;

},{"./ArraySlice":1,"lodash/negate":110}],5:[function(require,module,exports){
'use strict';

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

var Element = require('./primitives/Element');
var NullElement = require('./primitives/NullElement');
var StringElement = require('./primitives/StringElement');
var NumberElement = require('./primitives/NumberElement');
var BooleanElement = require('./primitives/BooleanElement');
var ArrayElement = require('./primitives/ArrayElement');
var MemberElement = require('./primitives/MemberElement');
var ObjectElement = require('./primitives/ObjectElement');
var LinkElement = require('./elements/LinkElement');
var RefElement = require('./elements/RefElement');

var ArraySlice = require('./ArraySlice');
var ObjectSlice = require('./ObjectSlice');

var KeyValuePair = require('./KeyValuePair');

/**
 * Refracts a JSON type to minim elements
 * @param value
 * @returns {Element}
 */
function refract(value) {
  if (value instanceof Element) {
    return value;
  }

  if (typeof value === 'string') {
    return new StringElement(value);
  }

  if (typeof value === 'number') {
    return new NumberElement(value);
  }

  if (typeof value === 'boolean') {
    return new BooleanElement(value);
  }

  if (value === null) {
    return new NullElement();
  }

  if (Array.isArray(value)) {
    return new ArrayElement(value.map(refract));
  }

  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
    var element = new ObjectElement(value);
    return element;
  }

  return value;
}

Element.prototype.ObjectElement = ObjectElement;
Element.prototype.RefElement = RefElement;
Element.prototype.MemberElement = MemberElement;

Element.prototype.refract = refract;
ArraySlice.prototype.refract = refract;

/**
 * Contains all of the element classes, and related structures and methods
 * for handling with element instances.
 */
module.exports = {
  Element: Element,
  NullElement: NullElement,
  StringElement: StringElement,
  NumberElement: NumberElement,
  BooleanElement: BooleanElement,
  ArrayElement: ArrayElement,
  MemberElement: MemberElement,
  ObjectElement: ObjectElement,
  LinkElement: LinkElement,
  RefElement: RefElement,

  refract: refract,

  ArraySlice: ArraySlice,
  ObjectSlice: ObjectSlice,
  KeyValuePair: KeyValuePair
};

},{"./ArraySlice":1,"./KeyValuePair":2,"./ObjectSlice":4,"./elements/LinkElement":6,"./elements/RefElement":7,"./primitives/ArrayElement":9,"./primitives/BooleanElement":10,"./primitives/Element":11,"./primitives/MemberElement":12,"./primitives/NullElement":13,"./primitives/NumberElement":14,"./primitives/ObjectElement":15,"./primitives/StringElement":16}],6:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var Element = require('../primitives/Element');

/** Hyperlinking MAY be used to link to other resources, provide links to
 * instructions on how to process a given element (by way of a profile or
 * other means), and may be used to provide meta data about the element in
 * which it's found. The meaning and purpose of the hyperlink is defined by
 * the link relation according to RFC 5988.
 *
 * @class LinkElement
 *
 * @param content
 * @param meta
 * @param attributes
 */
module.exports = function (_Element) {
  _inherits(LinkElement, _Element);

  function LinkElement(content, meta, attributes) {
    _classCallCheck(this, LinkElement);

    var _this = _possibleConstructorReturn(this, (LinkElement.__proto__ || Object.getPrototypeOf(LinkElement)).call(this, content || [], meta, attributes));

    _this.element = 'link';
    return _this;
  }

  /**
   * The relation identifier for the link, as defined in RFC 5988.
   * @type StringElement
   */

  _createClass(LinkElement, [{
    key: 'relation',
    get: function get() {
      return this.attributes.get('relation');
    },
    set: function set(relation) {
      this.attributes.set('relation', relation);
    }

    /**
     * The URI for the given link.
     * @type StringElement
     */

  }, {
    key: 'href',
    get: function get() {
      return this.attributes.get('href');
    },
    set: function set(href) {
      this.attributes.set('href', href);
    }
  }]);

  return LinkElement;
}(Element);

},{"../primitives/Element":11}],7:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var Element = require('../primitives/Element');

/**
 * @class RefElement
 *
 * @param content
 * @param meta
 * @param attributes
 *
 * @extends Element
 */
module.exports = function (_Element) {
  _inherits(RefElement, _Element);

  function RefElement(content, meta, attributes) {
    _classCallCheck(this, RefElement);

    var _this = _possibleConstructorReturn(this, (RefElement.__proto__ || Object.getPrototypeOf(RefElement)).call(this, content || [], meta, attributes));

    _this.element = 'ref';

    if (!_this.path) {
      _this.path = 'element';
    }
    return _this;
  }

  /**
   * Path of referenced element to transclude instead of element itself.
   * @type StringElement
   * @default element
   */

  _createClass(RefElement, [{
    key: 'path',
    get: function get() {
      return this.attributes.get('path');
    },
    set: function set(newValue) {
      this.attributes.set('path', newValue);
    }
  }]);

  return RefElement;
}(Element);

},{"../primitives/Element":11}],8:[function(require,module,exports){
'use strict';

var Namespace = require('./Namespace');
var elements = require('./elements');

// Direct access to the Namespace class
exports.Namespace = Namespace;

// Special constructor for the Namespace class
exports.namespace = function namespace(options) {
  return new Namespace(options);
};

exports.KeyValuePair = require('./KeyValuePair');

exports.ArraySlice = elements.ArraySlice;
exports.ObjectSlice = elements.ObjectSlice;

exports.Element = elements.Element;
exports.StringElement = elements.StringElement;
exports.NumberElement = elements.NumberElement;
exports.BooleanElement = elements.BooleanElement;
exports.NullElement = elements.NullElement;
exports.ArrayElement = elements.ArrayElement;
exports.ObjectElement = elements.ObjectElement;
exports.MemberElement = elements.MemberElement;
exports.RefElement = elements.RefElement;
exports.LinkElement = elements.LinkElement;

exports.refract = elements.refract;

exports.JSONSerialiser = require('./serialisers/JSONSerialiser');
exports.JSON06Serialiser = require('./serialisers/JSON06Serialiser');

},{"./KeyValuePair":2,"./Namespace":3,"./elements":5,"./serialisers/JSON06Serialiser":17,"./serialisers/JSONSerialiser":18}],9:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var negate = require('lodash/negate');
var Element = require('./Element');
var ArraySlice = require('../ArraySlice');

/**
 * @class
 *
 * @param {Element[]} content
 * @param meta
 * @param attributes
 */

var ArrayElement = function (_Element) {
  _inherits(ArrayElement, _Element);

  function ArrayElement(content, meta, attributes) {
    _classCallCheck(this, ArrayElement);

    var _this = _possibleConstructorReturn(this, (ArrayElement.__proto__ || Object.getPrototypeOf(ArrayElement)).call(this, content || [], meta, attributes));

    _this.element = 'array';
    return _this;
  }

  _createClass(ArrayElement, [{
    key: 'primitive',
    value: function primitive() {
      return 'array';
    }

    /**
     * @returns {Element}
     */

  }, {
    key: 'get',
    value: function get(index) {
      return this.content[index];
    }

    /**
     * Helper for returning the value of an item
     * This works for both ArrayElement and ObjectElement instances
     */

  }, {
    key: 'getValue',
    value: function getValue(indexOrKey) {
      var item = this.get(indexOrKey);

      if (item) {
        return item.toValue();
      }

      return undefined;
    }

    /**
     * @returns {Element}
     */

  }, {
    key: 'getIndex',
    value: function getIndex(index) {
      return this.content[index];
    }
  }, {
    key: 'set',
    value: function set(index, value) {
      this.content[index] = this.refract(value);
      return this;
    }
  }, {
    key: 'remove',
    value: function remove(index) {
      var removed = this.content.splice(index, 1);

      if (removed.length) {
        return removed[0];
      }

      return null;
    }

    /**
     * @param callback - Function to execute for each element
     * @param thisArg - Value to use as this (i.e the reference Object) when executing callback
     */

  }, {
    key: 'map',
    value: function map(callback, thisArg) {
      return this.content.map(callback, thisArg);
    }

    /**
     * Maps and then flattens the results.
     * @param callback - Function to execute for each element.
     * @param thisArg - Value to use as this (i.e the reference Object) when executing callback
     * @returns {array}
     */

  }, {
    key: 'flatMap',
    value: function flatMap(callback, thisArg) {
      return this.map(callback, thisArg).reduce(function (a, b) {
        return a.concat(b);
      }, []);
    }

    /**
     * Returns an array containing the truthy results of calling the given transformation with each element of this sequence
     * @param transform - A closure that accepts an element of this array as its argument and returns an optional value.
     * @param thisArg - Value to use as this (i.e the reference Object) when executing callback
     * @memberof ArrayElement.prototype
     * @returns An array of the non-undefined results of calling transform with each element of the array
     */

  }, {
    key: 'compactMap',
    value: function compactMap(transform, thisArg) {
      var results = [];

      this.forEach(function (element) {
        var result = transform.bind(thisArg)(element);

        if (result) {
          results.push(result);
        }
      });

      return results;
    }

    /**
     * @param callback - Function to execute for each element
     * @param thisArg - Value to use as this (i.e the reference Object) when executing callback
     * @returns {ArraySlice}
     */

  }, {
    key: 'filter',
    value: function filter(callback, thisArg) {
      return new ArraySlice(this.content.filter(callback, thisArg));
    }

    /**
     * @param callback - Function to execute for each element
     * @param thisArg - Value to use as this (i.e the reference Object) when executing callback
     * @returns {ArraySlice}
     */

  }, {
    key: 'reject',
    value: function reject(callback, thisArg) {
      return this.filter(negate(callback), thisArg);
    }

    /**
     * This is a reduce function specifically for Minim arrays and objects. It
     * allows for returning normal values or Minim instances, so it converts any
     * primitives on each step.
     */

  }, {
    key: 'reduce',
    value: function reduce(callback, initialValue) {
      var startIndex = void 0;
      var memo = void 0;

      // Allows for defining a starting value of the reduce
      if (initialValue !== undefined) {
        startIndex = 0;
        memo = this.refract(initialValue);
      } else {
        startIndex = 1;
        // Object Element content items are member elements. Because of this,
        // the memo should start out as the member value rather than the
        // actual member itself.
        memo = this.primitive() === 'object' ? this.first.value : this.first;
      }

      // Sending each function call to the registry allows for passing Minim
      // instances through the function return. This means you can return
      // primitive values or return Minim instances and reduce will still work.
      for (var i = startIndex; i < this.length; i += 1) {
        var item = this.content[i];

        if (this.primitive() === 'object') {
          memo = this.refract(callback(memo, item.value, item.key, item, this));
        } else {
          memo = this.refract(callback(memo, item, i, this));
        }
      }

      return memo;
    }

    /**
     * @callback forEachCallback
     * @param {Element} currentValue
     * @param {NumberElement} index
     */

    /**
     * @param {forEachCallback} callback - Function to execute for each element
     * @param thisArg - Value to use as this (i.e the reference Object) when executing callback
     * @memberof ArrayElement.prototype
     */

  }, {
    key: 'forEach',
    value: function forEach(callback, thisArg) {
      var _this2 = this;

      this.content.forEach(function (item, index) {
        callback.bind(thisArg)(item, _this2.refract(index));
      });
    }

    /**
     * @returns {Element}
     */

  }, {
    key: 'shift',
    value: function shift() {
      return this.content.shift();
    }

    /**
     * @param value
     */

  }, {
    key: 'unshift',
    value: function unshift(value) {
      this.content.unshift(this.refract(value));
    }

    /**
     * @param value
     */

  }, {
    key: 'push',
    value: function push(value) {
      this.content.push(this.refract(value));
      return this;
    }

    /**
     * @param value
     */

  }, {
    key: 'add',
    value: function add(value) {
      this.push(value);
    }

    /**
     * Recusively search all descendents using a condition function.
     * @returns {Element[]}
     */

  }, {
    key: 'findElements',
    value: function findElements(condition, givenOptions) {
      var options = givenOptions || {};
      var recursive = !!options.recursive;
      var results = options.results === undefined ? [] : options.results;

      // The forEach method for Object Elements returns value, key, and member.
      // This passes those along to the condition function below.
      this.forEach(function (item, keyOrIndex, member) {
        // We use duck-typing here to support any registered class that
        // may contain other elements.
        if (recursive && item.findElements !== undefined) {
          item.findElements(condition, {
            results: results,
            recursive: recursive
          });
        }

        if (condition(item, keyOrIndex, member)) {
          results.push(item);
        }
      });

      return results;
    }

    /**
     * Recusively search all descendents using a condition function.
     * @param condition
     * @returns {ArraySlice}
     */

  }, {
    key: 'find',
    value: function find(condition) {
      return new ArraySlice(this.findElements(condition, { recursive: true }));
    }

    /**
     * @param {string} element
     * @returns {ArraySlice}
     */

  }, {
    key: 'findByElement',
    value: function findByElement(element) {
      return this.find(function (item) {
        return item.element === element;
      });
    }

    /**
     * @param {string} className
     * @returns {ArraySlice}
     * @memberof ArrayElement.prototype
     */

  }, {
    key: 'findByClass',
    value: function findByClass(className) {
      return this.find(function (item) {
        return item.classes.contains(className);
      });
    }

    /**
     * Search the tree recursively and find the element with the matching ID
     * @param {string} id
     * @returns {Element}
     * @memberof ArrayElement.prototype
     */

  }, {
    key: 'getById',
    value: function getById(id) {
      return this.find(function (item) {
        return item.id.toValue() === id;
      }).first;
    }

    /**
     * Looks for matching children using deep equality
     * @param value
     * @returns {boolean}
     */

  }, {
    key: 'contains',
    value: function contains(value) {
      return this.content.some(function (element) {
        return element.equals(value);
      });
    }

    // Fantasy Land

    /**
     * @returns {ArrayElement} An empty array element
     */

  }, {
    key: 'empty',
    value: function empty() {
      return new this.constructor([]);
    }
  }, {
    key: 'fantasy-land/empty',
    value: function fantasyLandEmpty() {
      return this.empty();
    }

    /**
     * @param {ArrayElement} other
     * @returns {ArrayElement}
     */

  }, {
    key: 'concat',
    value: function concat(other) {
      return new this.constructor(this.content.concat(other.content));
    }
  }, {
    key: 'fantasy-land/concat',
    value: function fantasyLandConcat(other) {
      return this.concat(other);
    }
  }, {
    key: 'fantasy-land/map',
    value: function fantasyLandMap(transform) {
      return new this.constructor(this.map(transform));
    }
  }, {
    key: 'fantasy-land/chain',
    value: function fantasyLandChain(transform) {
      return this.map(function (element) {
        return transform(element);
      }, this).reduce(function (a, b) {
        return a.concat(b);
      }, this.empty());
    }
  }, {
    key: 'fantasy-land/filter',
    value: function fantasyLandFilter(callback) {
      return new this.constructor(this.content.filter(callback));
    }
  }, {
    key: 'fantasy-land/reduce',
    value: function fantasyLandReduce(transform, initialValue) {
      return this.content.reduce(transform, initialValue);
    }

    /**
     * Returns the length of the collection
     * @type number
     */

  }, {
    key: 'length',
    get: function get() {
      return this.content.length;
    }

    /**
     * Returns whether the collection is empty
     * @type boolean
     */

  }, {
    key: 'isEmpty',
    get: function get() {
      return this.content.length === 0;
    }

    /**
     * Return the first item in the collection
     * @type Element
     */

  }, {
    key: 'first',
    get: function get() {
      return this.getIndex(0);
    }

    /**
     * Return the second item in the collection
     * @type Element
     */

  }, {
    key: 'second',
    get: function get() {
      return this.getIndex(1);
    }

    /**
     * Return the last item in the collection
     * @type Element
     */

  }, {
    key: 'last',
    get: function get() {
      return this.getIndex(this.length - 1);
    }
  }]);

  return ArrayElement;
}(Element);

/**
 * @returns {ArrayElement} An empty array element
 */

ArrayElement.empty = function empty() {
  return new this();
};

ArrayElement['fantasy-land/empty'] = ArrayElement.empty;

if (typeof Symbol !== 'undefined') {
  ArrayElement.prototype[Symbol.iterator] = function symbol() {
    return this.content[Symbol.iterator]();
  };
}

module.exports = ArrayElement;

},{"../ArraySlice":1,"./Element":11,"lodash/negate":110}],10:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var Element = require('./Element');

/**
 * @class BooleanElement
 *
 * @param {boolean} content
 * @param meta
 * @param attributes
 */
module.exports = function (_Element) {
  _inherits(BooleanElement, _Element);

  function BooleanElement(content, meta, attributes) {
    _classCallCheck(this, BooleanElement);

    var _this = _possibleConstructorReturn(this, (BooleanElement.__proto__ || Object.getPrototypeOf(BooleanElement)).call(this, content, meta, attributes));

    _this.element = 'boolean';
    return _this;
  }

  _createClass(BooleanElement, [{
    key: 'primitive',
    value: function primitive() {
      return 'boolean';
    }
  }]);

  return BooleanElement;
}(Element);

},{"./Element":11}],11:[function(require,module,exports){
'use strict';

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var isEqual = require('lodash/isEqual');
var KeyValuePair = require('../KeyValuePair');
var ArraySlice = require('../ArraySlice.js');

/**
 * @class
 *
 * @param content
 * @param meta
 * @param attributes
 *
 * @property {string} element
 */

var Element = function () {
  function Element(content, meta, attributes) {
    _classCallCheck(this, Element);

    // Lazy load this.meta and this.attributes because it's a Minim element
    // Otherwise, we get into circuluar calls
    if (meta) {
      this.meta = meta;
    }

    if (attributes) {
      this.attributes = attributes;
    }

    this.content = content;
  }

  /**
   * Freezes the element to prevent any mutation.
   * A frozen element will add `parent` property to every child element
   * to allow traversing up the element tree.
   */

  _createClass(Element, [{
    key: 'freeze',
    value: function freeze() {
      var _this = this;

      if (Object.isFrozen(this)) {
        return;
      }

      if (this._meta) {
        this.meta.parent = this;
        this.meta.freeze();
      }

      if (this._attributes) {
        this.attributes.parent = this;
        this.attributes.freeze();
      }

      this.children.forEach(function (element) {
        element.parent = _this;
        element.freeze();
      }, this);

      if (this.content && Array.isArray(this.content)) {
        Object.freeze(this.content);
      }

      Object.freeze(this);
    }
  }, {
    key: 'primitive',
    value: function primitive() {}

    /**
     * Creates a deep clone of the instance
     */

  }, {
    key: 'clone',
    value: function clone() {
      var copy = new this.constructor();

      copy.element = this.element;

      if (this.meta.length) {
        copy._meta = this.meta.clone();
      }

      if (this.attributes.length) {
        copy._attributes = this.attributes.clone();
      }

      if (this.content) {
        if (this.content.clone) {
          copy.content = this.content.clone();
        } else if (Array.isArray(this.content)) {
          copy.content = this.content.map(function (element) {
            return element.clone();
          });
        } else {
          copy.content = this.content;
        }
      } else {
        copy.content = this.content;
      }

      return copy;
    }

    /**
     */

  }, {
    key: 'toValue',
    value: function toValue() {
      if (this.content instanceof Element) {
        return this.content.toValue();
      }

      if (this.content instanceof KeyValuePair) {
        return {
          key: this.content.key.toValue(),
          value: this.content.value.toValue()
        };
      }

      if (this.content && this.content.map) {
        return this.content.map(function (element) {
          return element.toValue();
        }, this);
      }

      return this.content;
    }

    /**
     * Creates a reference pointing at the Element
     * @returns {RefElement}
     * @memberof Element.prototype
     */

  }, {
    key: 'toRef',
    value: function toRef(path) {
      if (this.id.toValue() === '') {
        throw Error('Cannot create reference to an element that does not contain an ID');
      }

      var ref = new this.RefElement(this.id.toValue());

      if (path) {
        ref.path = path;
      }

      return ref;
    }

    /**
     * Finds the given elements in the element tree.
     * When providing multiple element names, you must first freeze the element.
     *
     * @param names {...elementNames}
     * @returns {ArraySlice}
     */

  }, {
    key: 'findRecursive',
    value: function findRecursive() {
      for (var _len = arguments.length, elementNames = Array(_len), _key = 0; _key < _len; _key++) {
        elementNames[_key] = arguments[_key];
      }

      if (arguments.length > 1 && !this.isFrozen) {
        throw new Error('Cannot find recursive with multiple element names without first freezing the element. Call `element.freeze()`');
      }

      var elementName = elementNames.pop();
      var elements = new ArraySlice();

      var append = function append(array, element) {
        array.push(element);
        return array;
      };

      // Checks the given element and appends element/sub-elements
      // that match element name to given array
      var checkElement = function checkElement(array, element) {
        if (element.element === elementName) {
          array.push(element);
        }

        var items = element.findRecursive(elementName);
        if (items) {
          items.reduce(append, array);
        }

        if (element.content instanceof KeyValuePair) {
          if (element.content.key) {
            checkElement(array, element.content.key);
          }

          if (element.content.value) {
            checkElement(array, element.content.value);
          }
        }

        return array;
      };

      if (this.content) {
        // Direct Element
        if (this.content.element) {
          checkElement(elements, this.content);
        }

        // Element Array
        if (Array.isArray(this.content)) {
          this.content.reduce(checkElement, elements);
        }
      }

      if (!elementNames.isEmpty) {
        elements = elements.filter(function (element) {
          var parentElements = element.parents.map(function (e) {
            return e.element;
          });

          // eslint-disable-next-line no-restricted-syntax
          for (var namesIndex in elementNames) {
            var name = elementNames[namesIndex];
            var index = parentElements.indexOf(name);

            if (index !== -1) {
              parentElements = parentElements.splice(0, index);
            } else {
              return false;
            }
          }

          return true;
        });
      }

      return elements;
    }
  }, {
    key: 'set',
    value: function set(content) {
      this.content = content;
      return this;
    }
  }, {
    key: 'equals',
    value: function equals(value) {
      return isEqual(this.toValue(), value);
    }
  }, {
    key: 'getMetaProperty',
    value: function getMetaProperty(name, value) {
      if (!this.meta.hasKey(name)) {
        if (this.isFrozen) {
          var element = this.refract(value);
          element.freeze();
          return element;
        }

        this.meta.set(name, value);
      }

      return this.meta.get(name);
    }
  }, {
    key: 'setMetaProperty',
    value: function setMetaProperty(name, value) {
      this.meta.set(name, value);
    }

    /**
     * @type String
     */

  }, {
    key: 'element',
    get: function get() {
      // Returns 'element' so we don't have undefined as element
      return this._storedElement || 'element';
    },
    set: function set(element) {
      this._storedElement = element;
    }
  }, {
    key: 'content',
    get: function get() {
      return this._content;
    },
    set: function set(value) {
      var _this2 = this;

      if (value instanceof Element) {
        this._content = value;
      } else if (value instanceof ArraySlice) {
        this.content = value.elements;
      } else if (typeof value == 'string' || typeof value == 'number' || typeof value == 'boolean' || value === 'null' || value == undefined) {
        // Primitive Values
        this._content = value;
      } else if (value instanceof KeyValuePair) {
        this._content = value;
      } else if (Array.isArray(value)) {
        this._content = value.map(this.refract);
      } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
        this._content = Object.keys(value).map(function (key) {
          return new _this2.MemberElement(key, value[key]);
        });
      } else {
        throw new Error('Cannot set content to given value');
      }
    }

    /**
     * @type ObjectElement
     */

  }, {
    key: 'meta',
    get: function get() {
      if (!this._meta) {
        if (this.isFrozen) {
          var meta = new this.ObjectElement();
          meta.freeze();
          return meta;
        }

        this._meta = new this.ObjectElement();
      }

      return this._meta;
    },
    set: function set(value) {
      if (value instanceof this.ObjectElement) {
        this._meta = value;
      } else {
        this.meta.set(value || {});
      }
    }

    /**
     * The attributes property defines attributes about the given instance
     * of the element, as specified by the element property.
     *
     * @type ObjectElement
     */

  }, {
    key: 'attributes',
    get: function get() {
      if (!this._attributes) {
        if (this.isFrozen) {
          var meta = new this.ObjectElement();
          meta.freeze();
          return meta;
        }

        this._attributes = new this.ObjectElement();
      }

      return this._attributes;
    },
    set: function set(value) {
      if (value instanceof this.ObjectElement) {
        this._attributes = value;
      } else {
        this.attributes.set(value || {});
      }
    }

    /**
     * Unique Identifier, MUST be unique throughout an entire element tree.
     * @type StringElement
     */

  }, {
    key: 'id',
    get: function get() {
      return this.getMetaProperty('id', '');
    },
    set: function set(element) {
      this.setMetaProperty('id', element);
    }

    /**
     * @type ArrayElement
     */

  }, {
    key: 'classes',
    get: function get() {
      return this.getMetaProperty('classes', []);
    },
    set: function set(element) {
      this.setMetaProperty('classes', element);
    }

    /**
     * Human-readable title of element
     * @type StringElement
     */

  }, {
    key: 'title',
    get: function get() {
      return this.getMetaProperty('title', '');
    },
    set: function set(element) {
      this.setMetaProperty('title', element);
    }

    /**
     * Human-readable description of element
     * @type StringElement
     */

  }, {
    key: 'description',
    get: function get() {
      return this.getMetaProperty('description', '');
    },
    set: function set(element) {
      this.setMetaProperty('description', element);
    }

    /**
     * @type ArrayElement
     */

  }, {
    key: 'links',
    get: function get() {
      return this.getMetaProperty('links', []);
    },
    set: function set(element) {
      this.setMetaProperty('links', element);
    }

    /**
     * Returns whether the element is frozen.
     * @type boolean
     * @see freeze
     */

  }, {
    key: 'isFrozen',
    get: function get() {
      return Object.isFrozen(this);
    }

    /**
     * Returns all of the parent elements.
     * @type ArraySlice
     */

  }, {
    key: 'parents',
    get: function get() {
      var parent = this.parent;

      var parents = new ArraySlice();

      while (parent) {
        parents.push(parent);

        // eslint-disable-next-line prefer-destructuring
        parent = parent.parent;
      }

      return parents;
    }

    /**
     * Returns all of the children elements found within the element.
     * @type ArraySlice
     * @see recursiveChildren
     */

  }, {
    key: 'children',
    get: function get() {
      if (Array.isArray(this.content)) {
        return new ArraySlice(this.content);
      }

      if (this.content instanceof KeyValuePair) {
        var children = new ArraySlice([this.content.key]);

        if (this.content.value) {
          children.push(this.content.value);
        }

        return children;
      }

      if (this.content instanceof Element) {
        return new ArraySlice([this.content]);
      }

      return new ArraySlice();
    }

    /**
    * Returns all of the children elements found within the element recursively.
    * @type ArraySlice
    * @see children
    */

  }, {
    key: 'recursiveChildren',
    get: function get() {
      var children = new ArraySlice();

      this.children.forEach(function (element) {
        children.push(element);

        element.recursiveChildren.forEach(function (child) {
          children.push(child);
        });
      });

      return children;
    }
  }]);

  return Element;
}();

module.exports = Element;

},{"../ArraySlice.js":1,"../KeyValuePair":2,"lodash/isEqual":100}],12:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var KeyValuePair = require('../KeyValuePair');
var Element = require('./Element');

/**
 * @class MemberElement
 *
 * @param {Element} key
 * @param {Element} value
 * @param meta
 * @param attributes
 */
module.exports = function (_Element) {
  _inherits(MemberElement, _Element);

  function MemberElement(key, value, meta, attributes) {
    _classCallCheck(this, MemberElement);

    var _this = _possibleConstructorReturn(this, (MemberElement.__proto__ || Object.getPrototypeOf(MemberElement)).call(this, new KeyValuePair(), meta, attributes));

    _this.element = 'member';
    _this.key = key;
    _this.value = value;
    return _this;
  }

  /**
   * @type Element
   */

  _createClass(MemberElement, [{
    key: 'key',
    get: function get() {
      return this.content.key;
    },
    set: function set(key) {
      this.content.key = this.refract(key);
    }

    /**
     * @type Element
     */

  }, {
    key: 'value',
    get: function get() {
      return this.content.value;
    },
    set: function set(value) {
      this.content.value = this.refract(value);
    }
  }]);

  return MemberElement;
}(Element);

},{"../KeyValuePair":2,"./Element":11}],13:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var Element = require('./Element');

/**
 */

var NullElement = function (_Element) {
  _inherits(NullElement, _Element);

  function NullElement(content, meta, attributes) {
    _classCallCheck(this, NullElement);

    var _this = _possibleConstructorReturn(this, (NullElement.__proto__ || Object.getPrototypeOf(NullElement)).call(this, content || null, meta, attributes));

    _this.element = 'null';
    return _this;
  }

  _createClass(NullElement, [{
    key: 'primitive',
    value: function primitive() {
      return 'null';
    }
  }, {
    key: 'set',
    value: function set() {
      return new Error('Cannot set the value of null');
    }
  }]);

  return NullElement;
}(Element);

module.exports = NullElement;

},{"./Element":11}],14:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var Element = require('./Element');

/**
 * @class NumberElement
 *
 * @param {number} content
 * @param meta
 * @param attributes
 */
module.exports = function (_Element) {
  _inherits(NumberElement, _Element);

  function NumberElement(content, meta, attributes) {
    _classCallCheck(this, NumberElement);

    var _this = _possibleConstructorReturn(this, (NumberElement.__proto__ || Object.getPrototypeOf(NumberElement)).call(this, content, meta, attributes));

    _this.element = 'number';
    return _this;
  }

  _createClass(NumberElement, [{
    key: 'primitive',
    value: function primitive() {
      return 'number';
    }
  }]);

  return NumberElement;
}(Element);

},{"./Element":11}],15:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var negate = require('lodash/negate');
var isObject = require('lodash/isObject');

var ArrayElement = require('./ArrayElement');
var MemberElement = require('./MemberElement');
var ObjectSlice = require('../ObjectSlice');

/**
 * @class
 *
 * @param content
 * @param meta
 * @param attributes
 */

var ObjectElement = function (_ArrayElement) {
  _inherits(ObjectElement, _ArrayElement);

  function ObjectElement(content, meta, attributes) {
    _classCallCheck(this, ObjectElement);

    var _this = _possibleConstructorReturn(this, (ObjectElement.__proto__ || Object.getPrototypeOf(ObjectElement)).call(this, content || [], meta, attributes));

    _this.element = 'object';
    return _this;
  }

  _createClass(ObjectElement, [{
    key: 'primitive',
    value: function primitive() {
      return 'object';
    }
  }, {
    key: 'toValue',
    value: function toValue() {
      return this.content.reduce(function (results, el) {
        results[el.key.toValue()] = el.value.toValue();
        return results;
      }, {});
    }

    /**
     * @param key
     * @returns {Element}
     */

  }, {
    key: 'get',
    value: function get(name) {
      var member = this.getMember(name);

      if (member) {
        return member.value;
      }

      return undefined;
    }

    /**
     * @param key
     * @returns {MemberElement}
     */

  }, {
    key: 'getMember',
    value: function getMember(name) {
      if (name === undefined) {
        return undefined;
      }

      return this.content.find(function (element) {
        return element.key.toValue() === name;
      });
    }

    /**
     * @param key
     */

  }, {
    key: 'remove',
    value: function remove(name) {
      var removed = null;

      this.content = this.content.filter(function (item) {
        if (item.key.toValue() === name) {
          removed = item;
          return false;
        }

        return true;
      });

      return removed;
    }

    /**
     * @param key
     * @returns {Element}
     */

  }, {
    key: 'getKey',
    value: function getKey(name) {
      var member = this.getMember(name);

      if (member) {
        return member.key;
      }

      return undefined;
    }

    /**
     * Set allows either a key/value pair to be given or an object
     * If an object is given, each key is set to its respective value
     */

  }, {
    key: 'set',
    value: function set(keyOrObject, value) {
      var _this2 = this;

      if (isObject(keyOrObject)) {
        Object.keys(keyOrObject).forEach(function (objectKey) {
          _this2.set(objectKey, keyOrObject[objectKey]);
        });

        return this;
      }

      // Store as key for clarity
      var key = keyOrObject;
      var member = this.getMember(key);

      if (member) {
        member.value = value;
      } else {
        this.content.push(new MemberElement(key, value));
      }

      return this;
    }

    /**
     */

  }, {
    key: 'keys',
    value: function keys() {
      return this.content.map(function (item) {
        return item.key.toValue();
      });
    }

    /**
     */

  }, {
    key: 'values',
    value: function values() {
      return this.content.map(function (item) {
        return item.value.toValue();
      });
    }

    /**
     * @returns {boolean}
     */

  }, {
    key: 'hasKey',
    value: function hasKey(value) {
      for (var i = 0; i < this.content.length; i += 1) {
        if (this.content[i].key.equals(value)) {
          return true;
        }
      }

      return false;
    }

    /**
     * @returns {array}
     */

  }, {
    key: 'items',
    value: function items() {
      return this.content.map(function (item) {
        return [item.key.toValue(), item.value.toValue()];
      });
    }

    /**
     * @param callback
     * @param thisArg - Value to use as this (i.e the reference Object) when executing callback
     */

  }, {
    key: 'map',
    value: function map(callback, thisArg) {
      return this.content.map(function (item) {
        return callback.bind(thisArg)(item.value, item.key, item);
      });
    }

    /**
     * Returns an array containing the truthy results of calling the given transformation with each element of this sequence
     * @param transform - A closure that accepts the value, key and member element of this object as its argument and returns an optional value.
     * @param thisArg - Value to use as this (i.e the reference Object) when executing callback
     * @returns An array of the non-undefined results of calling transform with each element of the array
     */

  }, {
    key: 'compactMap',
    value: function compactMap(callback, thisArg) {
      var results = [];

      this.forEach(function (value, key, member) {
        var result = callback.bind(thisArg)(value, key, member);

        if (result) {
          results.push(result);
        }
      });

      return results;
    }

    /**
     * @param callback
     * @param thisArg - Value to use as this (i.e the reference Object) when executing callback
     *
     * @returns {ObjectSlice}
     */

  }, {
    key: 'filter',
    value: function filter(callback, thisArg) {
      return new ObjectSlice(this.content).filter(callback, thisArg);
    }

    /**
     * @param callback
     * @param thisArg - Value to use as this (i.e the reference Object) when executing callback
     *
     * @returns {ObjectSlice}
     *
     * @memberof ObjectElement.prototype
     */

  }, {
    key: 'reject',
    value: function reject(callback, thisArg) {
      return this.filter(negate(callback), thisArg);
    }

    /**
     * @param callback
     * @param thisArg - Value to use as this (i.e the reference Object) when executing callback
     *
     * @memberof ObjectElement.prototype
     */

  }, {
    key: 'forEach',
    value: function forEach(callback, thisArg) {
      return this.content.forEach(function (item) {
        return callback.bind(thisArg)(item.value, item.key, item);
      });
    }
  }]);

  return ObjectElement;
}(ArrayElement);

module.exports = ObjectElement;

},{"../ObjectSlice":4,"./ArrayElement":9,"./MemberElement":12,"lodash/isObject":105,"lodash/negate":110}],16:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var Element = require('./Element');

/**
 * @class StringElement
 *
 * @param {string} content
 * @param meta
 * @param attributes
 */
module.exports = function (_Element) {
  _inherits(StringElement, _Element);

  function StringElement(content, meta, attributes) {
    _classCallCheck(this, StringElement);

    var _this = _possibleConstructorReturn(this, (StringElement.__proto__ || Object.getPrototypeOf(StringElement)).call(this, content, meta, attributes));

    _this.element = 'string';
    return _this;
  }

  _createClass(StringElement, [{
    key: 'primitive',
    value: function primitive() {
      return 'string';
    }

    /**
     * The length of the string.
     * @type number
     */

  }, {
    key: 'length',
    get: function get() {
      return this.content.length;
    }
  }]);

  return StringElement;
}(Element);

},{"./Element":11}],17:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;_e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }return _arr;
  }return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var JSONSerialiser = require('./JSONSerialiser');

module.exports = function (_JSONSerialiser) {
  _inherits(JSON06Serialiser, _JSONSerialiser);

  function JSON06Serialiser() {
    _classCallCheck(this, JSON06Serialiser);

    return _possibleConstructorReturn(this, (JSON06Serialiser.__proto__ || Object.getPrototypeOf(JSON06Serialiser)).apply(this, arguments));
  }

  _createClass(JSON06Serialiser, [{
    key: 'serialise',
    value: function serialise(element) {
      if (!(element instanceof this.namespace.elements.Element)) {
        throw new TypeError('Given element `' + element + '` is not an Element instance');
      }

      var variable = void 0;
      if (element._attributes && element.attributes.get('variable')) {
        variable = element.attributes.get('variable');
      }

      var payload = {
        element: element.element
      };

      if (element._meta && element._meta.length > 0) {
        payload.meta = this.serialiseObject(element.meta);
      }

      var isEnum = element.element === 'enum' || element.attributes.keys().indexOf('enumerations') !== -1;

      if (isEnum) {
        var attributes = this.enumSerialiseAttributes(element);

        if (attributes) {
          payload.attributes = attributes;
        }
      } else if (element._attributes && element._attributes.length > 0) {
        var _attributes = element.attributes;

        // Meta attribute was renamed to metadata

        if (_attributes.get('metadata')) {
          _attributes = _attributes.clone();
          _attributes.set('meta', _attributes.get('metadata'));
          _attributes.remove('metadata');
        }

        if (element.element === 'member' && variable) {
          _attributes = _attributes.clone();
          _attributes.remove('variable');
        }

        if (_attributes.length > 0) {
          payload.attributes = this.serialiseObject(_attributes);
        }
      }

      if (isEnum) {
        payload.content = this.enumSerialiseContent(element, payload);
      } else if (this[element.element + 'SerialiseContent']) {
        payload.content = this[element.element + 'SerialiseContent'](element, payload);
      } else if (element.content !== undefined) {
        var content = void 0;

        if (variable && element.content.key) {
          content = element.content.clone();
          content.key.attributes.set('variable', variable);
          content = this.serialiseContent(content);
        } else {
          content = this.serialiseContent(element.content);
        }

        if (this.shouldSerialiseContent(element, content)) {
          payload.content = content;
        }
      }

      return payload;
    }
  }, {
    key: 'shouldSerialiseContent',
    value: function shouldSerialiseContent(element, content) {
      if (content === undefined) {
        return false;
      }

      if (element.element === 'parseResult' || element.element === 'httpRequest' || element.element === 'httpResponse' || element.element === 'category' || element.element === 'link') {
        return true;
      }

      if (Array.isArray(content) && content.length === 0) {
        return false;
      }

      return true;
    }
  }, {
    key: 'refSerialiseContent',
    value: function refSerialiseContent(element, payload) {
      delete payload.attributes;

      return {
        href: element.toValue(),
        path: element.path.toValue()
      };
    }
  }, {
    key: 'sourceMapSerialiseContent',
    value: function sourceMapSerialiseContent(element) {
      return element.toValue();
    }
  }, {
    key: 'dataStructureSerialiseContent',
    value: function dataStructureSerialiseContent(element) {
      return [this.serialiseContent(element.content)];
    }
  }, {
    key: 'enumSerialiseAttributes',
    value: function enumSerialiseAttributes(element) {
      var _this2 = this;

      var attributes = element.attributes.clone();

      // Enumerations attribute was is placed inside content (see `enumSerialiseContent` below)
      var enumerations = attributes.remove('enumerations') || new this.namespace.elements.Array([]);

      // Remove fixed type attribute from samples and default
      var defaultValue = attributes.get('default');
      var samples = attributes.get('samples') || new this.namespace.elements.Array([]);

      if (defaultValue && defaultValue.content) {
        defaultValue.content.attributes.remove('typeAttributes');
        // Wrap default in array (not sure it is really needed because tests pass without this line)
        attributes.set('default', new this.namespace.elements.Array([defaultValue.content]));
      }

      // Strip typeAttributes from samples, 0.6 doesn't usually contain them in samples
      samples.forEach(function (sample) {
        if (sample.content && sample.content.element) {
          sample.content.attributes.remove('typeAttributes');
        }
      });

      // Content -> Samples
      if (element.content && enumerations.length !== 0) {
        // If we don't have enumerations, content should stay in
        // content (enumerations) as per Drafter 3 behaviour.
        samples.unshift(element.content);
      }

      samples = samples.map(function (sample) {
        if (sample instanceof _this2.namespace.elements.Array) {
          return [sample];
        }

        return new _this2.namespace.elements.Array([sample.content]);
      });

      if (samples.length) {
        attributes.set('samples', samples);
      }

      if (attributes.length > 0) {
        return this.serialiseObject(attributes);
      }

      return undefined;
    }
  }, {
    key: 'enumSerialiseContent',
    value: function enumSerialiseContent(element) {
      var _this3 = this;

      // In API Elements < 1.0, the content is the enumerations
      // If we don't have an enumerations, use the value (Drafter 3 behaviour)

      if (element._attributes) {
        var enumerations = element.attributes.get('enumerations');

        if (enumerations && enumerations.length > 0) {
          return enumerations.content.map(function (enumeration) {
            var e = enumeration.clone();
            e.attributes.remove('typeAttributes');
            return _this3.serialise(e);
          });
        }
      }

      if (element.content) {
        var value = element.content.clone();
        value.attributes.remove('typeAttributes');
        return [this.serialise(value)];
      }

      return [];
    }
  }, {
    key: 'deserialise',
    value: function deserialise(value) {
      if (typeof value === 'string') {
        return new this.namespace.elements.String(value);
      }

      if (typeof value === 'number') {
        return new this.namespace.elements.Number(value);
      }

      if (typeof value === 'boolean') {
        return new this.namespace.elements.Boolean(value);
      }

      if (value === null) {
        return new this.namespace.elements.Null();
      }

      if (Array.isArray(value)) {
        return new this.namespace.elements.Array(value.map(this.deserialise, this));
      }

      var ElementClass = this.namespace.getElementClass(value.element);
      var element = new ElementClass();

      if (element.element !== value.element) {
        element.element = value.element;
      }

      if (value.meta) {
        this.deserialiseObject(value.meta, element.meta);
      }

      if (value.attributes) {
        this.deserialiseObject(value.attributes, element.attributes);
      }

      var content = this.deserialiseContent(value.content);
      if (content !== undefined || element.content === null) {
        element.content = content;
      }

      if (element.element === 'enum') {
        // Grab enumerations from content
        if (element.content) {
          element.attributes.set('enumerations', element.content);
        }

        // Unwrap the sample value (inside double array)
        var samples = element.attributes.get('samples');
        element.attributes.remove('samples');

        if (samples) {
          // Re-wrap samples from array of array to array of enum's

          var existingSamples = samples;

          samples = new this.namespace.elements.Array();
          existingSamples.forEach(function (existingSample) {
            existingSample.forEach(function (sample) {
              var enumElement = new ElementClass(sample);
              enumElement.element = element.element;
              samples.push(enumElement);
            });
          });

          var sample = samples.shift();

          if (sample) {
            element.content = sample.content;
          } else {
            element.content = undefined;
          }

          element.attributes.set('samples', samples);
        } else {
          element.content = undefined;
        }

        // Unwrap the default value
        var defaultValue = element.attributes.get('default');
        if (defaultValue && defaultValue.length > 0) {
          defaultValue = defaultValue.get(0);
          var defaultElement = new ElementClass(defaultValue);
          defaultElement.element = element.element;
          element.attributes.set('default', defaultElement);
        }
      } else if (element.element === 'dataStructure' && Array.isArray(element.content)) {
        var _element$content = _slicedToArray(element.content, 1);

        element.content = _element$content[0];
      } else if (element.element === 'category') {
        // "meta" attribute has been renamed to metadata
        var metadata = element.attributes.get('meta');

        if (metadata) {
          element.attributes.set('metadata', metadata);
          element.attributes.remove('meta');
        }
      } else if (element.element === 'member' && element.key && element.key._attributes && element.key._attributes.getValue('variable')) {
        element.attributes.set('variable', element.key.attributes.get('variable'));
        element.key.attributes.remove('variable');
      }

      return element;
    }

    // Private API

  }, {
    key: 'serialiseContent',
    value: function serialiseContent(content) {
      if (content instanceof this.namespace.elements.Element) {
        return this.serialise(content);
      }

      if (content instanceof this.namespace.KeyValuePair) {
        var pair = {
          key: this.serialise(content.key)
        };

        if (content.value) {
          pair.value = this.serialise(content.value);
        }

        return pair;
      }

      if (content && content.map) {
        return content.map(this.serialise, this);
      }

      return content;
    }
  }, {
    key: 'deserialiseContent',
    value: function deserialiseContent(content) {
      if (content) {
        if (content.element) {
          return this.deserialise(content);
        }

        if (content.key) {
          var pair = new this.namespace.KeyValuePair(this.deserialise(content.key));

          if (content.value) {
            pair.value = this.deserialise(content.value);
          }

          return pair;
        }

        if (content.map) {
          return content.map(this.deserialise, this);
        }
      }

      return content;
    }
  }, {
    key: 'shouldRefract',
    value: function shouldRefract(element) {
      if (element._attributes && element.attributes.keys().length || element._meta && element.meta.keys().length) {
        return true;
      }

      if (element.element === 'enum') {
        // enum elements are treated like primitives (array)
        return false;
      }

      if (element.element !== element.primitive() || element.element === 'member') {
        return true;
      }

      return false;
    }
  }, {
    key: 'convertKeyToRefract',
    value: function convertKeyToRefract(key, item) {
      var _this4 = this;

      if (this.shouldRefract(item)) {
        return this.serialise(item);
      }

      if (item.element === 'enum') {
        return this.serialiseEnum(item);
      }

      if (item.element === 'array') {
        // This is a plain array, but maybe it contains elements with
        // additional information? Let's see!
        var values = [];

        for (var index = 0; index < item.length; index += 1) {
          var subItem = item.get(index);

          if (this.shouldRefract(subItem) || key === 'default') {
            values.push(this.serialise(subItem));
          } else if (subItem.element === 'array' || subItem.element === 'object' || subItem.element === 'enum') {
            // items for array or enum inside array are always serialised
            var value = subItem.children.map(function (subSubItem) {
              return _this4.serialise(subSubItem);
            });
            values.push(value);
          } else {
            values.push(subItem.toValue());
          }
        }

        return values;
      }

      if (item.element === 'object') {
        // This is an object, so we need to check if it's members contain
        // additional information
        var _values = [];
        var content = item.content || [];

        for (var _index = 0; _index < content.length; _index += 1) {
          _values.push(this.serialise(content[_index]));
        }

        return _values;
      }

      return item.toValue();
    }
  }, {
    key: 'serialiseEnum',
    value: function serialiseEnum(element) {
      var _this5 = this;

      return element.children.map(function (item) {
        return _this5.serialise(item);
      });
    }
  }, {
    key: 'serialiseObject',
    value: function serialiseObject(obj) {
      var _this6 = this;

      var result = {};

      obj.keys().forEach(function (key) {
        var value = obj.get(key);

        if (value) {
          result[key] = _this6.convertKeyToRefract(key, value);
        }
      });

      return result;
    }
  }, {
    key: 'deserialiseObject',
    value: function deserialiseObject(from, to) {
      var _this7 = this;

      Object.keys(from).forEach(function (key) {
        to.set(key, _this7.deserialise(from[key]));
      });
    }
  }]);

  return JSON06Serialiser;
}(JSONSerialiser);

},{"./JSONSerialiser":18}],18:[function(require,module,exports){
'use strict';

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/**
 * @class JSONSerialiser
 *
 * @param {Namespace} namespace
 *
 * @property {Namespace} namespace
 */
var JSONSerialiser = function () {
  function JSONSerialiser(namespace) {
    _classCallCheck(this, JSONSerialiser);

    this.namespace = namespace || new this.Namespace();
  }

  /**
   * @param {Element} element
   * @returns {object}
   */

  _createClass(JSONSerialiser, [{
    key: 'serialise',
    value: function serialise(element) {
      if (!(element instanceof this.namespace.elements.Element)) {
        throw new TypeError('Given element `' + element + '` is not an Element instance');
      }

      var payload = {
        element: element.element
      };

      if (element._meta && element._meta.length > 0) {
        payload.meta = this.serialiseObject(element.meta);
      }

      if (element._attributes && element._attributes.length > 0) {
        payload.attributes = this.serialiseObject(element.attributes);
      }

      var content = this.serialiseContent(element.content);

      if (content !== undefined) {
        payload.content = content;
      }

      return payload;
    }

    /**
     * @param {object} value
     * @returns {Element}
     */

  }, {
    key: 'deserialise',
    value: function deserialise(value) {
      if (!value.element) {
        throw new Error('Given value is not an object containing an element name');
      }

      var ElementClass = this.namespace.getElementClass(value.element);
      var element = new ElementClass();

      if (element.element !== value.element) {
        element.element = value.element;
      }

      if (value.meta) {
        this.deserialiseObject(value.meta, element.meta);
      }

      if (value.attributes) {
        this.deserialiseObject(value.attributes, element.attributes);
      }

      var content = this.deserialiseContent(value.content);
      if (content !== undefined || element.content === null) {
        element.content = content;
      }

      return element;
    }

    // Private API

  }, {
    key: 'serialiseContent',
    value: function serialiseContent(content) {
      if (content instanceof this.namespace.elements.Element) {
        return this.serialise(content);
      }

      if (content instanceof this.namespace.KeyValuePair) {
        var pair = {
          key: this.serialise(content.key)
        };

        if (content.value) {
          pair.value = this.serialise(content.value);
        }

        return pair;
      }

      if (content && content.map) {
        if (content.length === 0) {
          return undefined;
        }

        return content.map(this.serialise, this);
      }

      return content;
    }
  }, {
    key: 'deserialiseContent',
    value: function deserialiseContent(content) {
      if (content) {
        if (content.element) {
          return this.deserialise(content);
        }

        if (content.key) {
          var pair = new this.namespace.KeyValuePair(this.deserialise(content.key));

          if (content.value) {
            pair.value = this.deserialise(content.value);
          }

          return pair;
        }

        if (content.map) {
          return content.map(this.deserialise, this);
        }
      }

      return content;
    }
  }, {
    key: 'serialiseObject',
    value: function serialiseObject(obj) {
      var _this = this;

      var result = {};

      obj.keys().forEach(function (key) {
        var value = obj.get(key);

        if (value) {
          result[key] = _this.serialise(value);
        }
      });

      return result;
    }
  }, {
    key: 'deserialiseObject',
    value: function deserialiseObject(from, to) {
      var _this2 = this;

      Object.keys(from).forEach(function (key) {
        to.set(key, _this2.deserialise(from[key]));
      });
    }
  }]);

  return JSONSerialiser;
}();

module.exports = JSONSerialiser;

},{}],19:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;

},{"./_getNative":54,"./_root":84}],20:[function(require,module,exports){
var hashClear = require('./_hashClear'),
    hashDelete = require('./_hashDelete'),
    hashGet = require('./_hashGet'),
    hashHas = require('./_hashHas'),
    hashSet = require('./_hashSet');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;

},{"./_hashClear":59,"./_hashDelete":60,"./_hashGet":61,"./_hashHas":62,"./_hashSet":63}],21:[function(require,module,exports){
var listCacheClear = require('./_listCacheClear'),
    listCacheDelete = require('./_listCacheDelete'),
    listCacheGet = require('./_listCacheGet'),
    listCacheHas = require('./_listCacheHas'),
    listCacheSet = require('./_listCacheSet');

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;

},{"./_listCacheClear":68,"./_listCacheDelete":69,"./_listCacheGet":70,"./_listCacheHas":71,"./_listCacheSet":72}],22:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;

},{"./_getNative":54,"./_root":84}],23:[function(require,module,exports){
var mapCacheClear = require('./_mapCacheClear'),
    mapCacheDelete = require('./_mapCacheDelete'),
    mapCacheGet = require('./_mapCacheGet'),
    mapCacheHas = require('./_mapCacheHas'),
    mapCacheSet = require('./_mapCacheSet');

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;

},{"./_mapCacheClear":73,"./_mapCacheDelete":74,"./_mapCacheGet":75,"./_mapCacheHas":76,"./_mapCacheSet":77}],24:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;

},{"./_getNative":54,"./_root":84}],25:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;

},{"./_getNative":54,"./_root":84}],26:[function(require,module,exports){
var MapCache = require('./_MapCache'),
    setCacheAdd = require('./_setCacheAdd'),
    setCacheHas = require('./_setCacheHas');

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;

},{"./_MapCache":23,"./_setCacheAdd":85,"./_setCacheHas":86}],27:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    stackClear = require('./_stackClear'),
    stackDelete = require('./_stackDelete'),
    stackGet = require('./_stackGet'),
    stackHas = require('./_stackHas'),
    stackSet = require('./_stackSet');

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;

},{"./_ListCache":21,"./_stackClear":88,"./_stackDelete":89,"./_stackGet":90,"./_stackHas":91,"./_stackSet":92}],28:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;

},{"./_root":84}],29:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;

},{"./_root":84}],30:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;

},{"./_getNative":54,"./_root":84}],31:[function(require,module,exports){
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;

},{}],32:[function(require,module,exports){
var baseTimes = require('./_baseTimes'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isIndex = require('./_isIndex'),
    isTypedArray = require('./isTypedArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;

},{"./_baseTimes":44,"./_isIndex":64,"./isArguments":95,"./isArray":96,"./isBuffer":99,"./isTypedArray":108}],33:[function(require,module,exports){
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;

},{}],34:[function(require,module,exports){
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;

},{}],35:[function(require,module,exports){
var eq = require('./eq');

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;

},{"./eq":94}],36:[function(require,module,exports){
var arrayPush = require('./_arrayPush'),
    isArray = require('./isArray');

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;

},{"./_arrayPush":33,"./isArray":96}],37:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    getRawTag = require('./_getRawTag'),
    objectToString = require('./_objectToString');

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;

},{"./_Symbol":28,"./_getRawTag":55,"./_objectToString":82}],38:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

},{"./_baseGetTag":37,"./isObjectLike":106}],39:[function(require,module,exports){
var baseIsEqualDeep = require('./_baseIsEqualDeep'),
    isObjectLike = require('./isObjectLike');

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;

},{"./_baseIsEqualDeep":40,"./isObjectLike":106}],40:[function(require,module,exports){
var Stack = require('./_Stack'),
    equalArrays = require('./_equalArrays'),
    equalByTag = require('./_equalByTag'),
    equalObjects = require('./_equalObjects'),
    getTag = require('./_getTag'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isTypedArray = require('./isTypedArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;

},{"./_Stack":27,"./_equalArrays":48,"./_equalByTag":49,"./_equalObjects":50,"./_getTag":57,"./isArray":96,"./isBuffer":99,"./isTypedArray":108}],41:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isMasked = require('./_isMasked'),
    isObject = require('./isObject'),
    toSource = require('./_toSource');

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;

},{"./_isMasked":66,"./_toSource":93,"./isFunction":101,"./isObject":105}],42:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isLength = require('./isLength'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

},{"./_baseGetTag":37,"./isLength":102,"./isObjectLike":106}],43:[function(require,module,exports){
var isPrototype = require('./_isPrototype'),
    nativeKeys = require('./_nativeKeys');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;

},{"./_isPrototype":67,"./_nativeKeys":80}],44:[function(require,module,exports){
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

},{}],45:[function(require,module,exports){
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;

},{}],46:[function(require,module,exports){
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;

},{}],47:[function(require,module,exports){
var root = require('./_root');

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;

},{"./_root":84}],48:[function(require,module,exports){
var SetCache = require('./_SetCache'),
    arraySome = require('./_arraySome'),
    cacheHas = require('./_cacheHas');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;

},{"./_SetCache":26,"./_arraySome":34,"./_cacheHas":46}],49:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    Uint8Array = require('./_Uint8Array'),
    eq = require('./eq'),
    equalArrays = require('./_equalArrays'),
    mapToArray = require('./_mapToArray'),
    setToArray = require('./_setToArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;

},{"./_Symbol":28,"./_Uint8Array":29,"./_equalArrays":48,"./_mapToArray":78,"./_setToArray":87,"./eq":94}],50:[function(require,module,exports){
var getAllKeys = require('./_getAllKeys');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;

},{"./_getAllKeys":52}],51:[function(require,module,exports){
(function (global){
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],52:[function(require,module,exports){
var baseGetAllKeys = require('./_baseGetAllKeys'),
    getSymbols = require('./_getSymbols'),
    keys = require('./keys');

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;

},{"./_baseGetAllKeys":36,"./_getSymbols":56,"./keys":109}],53:[function(require,module,exports){
var isKeyable = require('./_isKeyable');

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;

},{"./_isKeyable":65}],54:[function(require,module,exports){
var baseIsNative = require('./_baseIsNative'),
    getValue = require('./_getValue');

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

},{"./_baseIsNative":41,"./_getValue":58}],55:[function(require,module,exports){
var Symbol = require('./_Symbol');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

},{"./_Symbol":28}],56:[function(require,module,exports){
var arrayFilter = require('./_arrayFilter'),
    stubArray = require('./stubArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;

},{"./_arrayFilter":31,"./stubArray":111}],57:[function(require,module,exports){
var DataView = require('./_DataView'),
    Map = require('./_Map'),
    Promise = require('./_Promise'),
    Set = require('./_Set'),
    WeakMap = require('./_WeakMap'),
    baseGetTag = require('./_baseGetTag'),
    toSource = require('./_toSource');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;

},{"./_DataView":19,"./_Map":22,"./_Promise":24,"./_Set":25,"./_WeakMap":30,"./_baseGetTag":37,"./_toSource":93}],58:[function(require,module,exports){
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;

},{}],59:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;

},{"./_nativeCreate":79}],60:[function(require,module,exports){
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;

},{}],61:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;

},{"./_nativeCreate":79}],62:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;

},{"./_nativeCreate":79}],63:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;

},{"./_nativeCreate":79}],64:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;

},{}],65:[function(require,module,exports){
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;

},{}],66:[function(require,module,exports){
var coreJsData = require('./_coreJsData');

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;

},{"./_coreJsData":47}],67:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;

},{}],68:[function(require,module,exports){
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;

},{}],69:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;

},{"./_assocIndexOf":35}],70:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;

},{"./_assocIndexOf":35}],71:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;

},{"./_assocIndexOf":35}],72:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;

},{"./_assocIndexOf":35}],73:[function(require,module,exports){
var Hash = require('./_Hash'),
    ListCache = require('./_ListCache'),
    Map = require('./_Map');

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;

},{"./_Hash":20,"./_ListCache":21,"./_Map":22}],74:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;

},{"./_getMapData":53}],75:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;

},{"./_getMapData":53}],76:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;

},{"./_getMapData":53}],77:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;

},{"./_getMapData":53}],78:[function(require,module,exports){
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;

},{}],79:[function(require,module,exports){
var getNative = require('./_getNative');

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;

},{"./_getNative":54}],80:[function(require,module,exports){
var overArg = require('./_overArg');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;

},{"./_overArg":83}],81:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;

},{"./_freeGlobal":51}],82:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

},{}],83:[function(require,module,exports){
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

},{}],84:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

},{"./_freeGlobal":51}],85:[function(require,module,exports){
/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;

},{}],86:[function(require,module,exports){
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;

},{}],87:[function(require,module,exports){
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;

},{}],88:[function(require,module,exports){
var ListCache = require('./_ListCache');

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;

},{"./_ListCache":21}],89:[function(require,module,exports){
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;

},{}],90:[function(require,module,exports){
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;

},{}],91:[function(require,module,exports){
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;

},{}],92:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    Map = require('./_Map'),
    MapCache = require('./_MapCache');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;

},{"./_ListCache":21,"./_Map":22,"./_MapCache":23}],93:[function(require,module,exports){
/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;

},{}],94:[function(require,module,exports){
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;

},{}],95:[function(require,module,exports){
var baseIsArguments = require('./_baseIsArguments'),
    isObjectLike = require('./isObjectLike');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;

},{"./_baseIsArguments":38,"./isObjectLike":106}],96:[function(require,module,exports){
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;

},{}],97:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isLength = require('./isLength');

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

},{"./isFunction":101,"./isLength":102}],98:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var boolTag = '[object Boolean]';

/**
 * Checks if `value` is classified as a boolean primitive or object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
 * @example
 *
 * _.isBoolean(false);
 * // => true
 *
 * _.isBoolean(null);
 * // => false
 */
function isBoolean(value) {
  return value === true || value === false ||
    (isObjectLike(value) && baseGetTag(value) == boolTag);
}

module.exports = isBoolean;

},{"./_baseGetTag":37,"./isObjectLike":106}],99:[function(require,module,exports){
var root = require('./_root'),
    stubFalse = require('./stubFalse');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

},{"./_root":84,"./stubFalse":112}],100:[function(require,module,exports){
var baseIsEqual = require('./_baseIsEqual');

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

module.exports = isEqual;

},{"./_baseIsEqual":39}],101:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObject = require('./isObject');

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

},{"./_baseGetTag":37,"./isObject":105}],102:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

},{}],103:[function(require,module,exports){
/**
 * Checks if `value` is `null`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
 * @example
 *
 * _.isNull(null);
 * // => true
 *
 * _.isNull(void 0);
 * // => false
 */
function isNull(value) {
  return value === null;
}

module.exports = isNull;

},{}],104:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var numberTag = '[object Number]';

/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
 * classified as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */
function isNumber(value) {
  return typeof value == 'number' ||
    (isObjectLike(value) && baseGetTag(value) == numberTag);
}

module.exports = isNumber;

},{"./_baseGetTag":37,"./isObjectLike":106}],105:[function(require,module,exports){
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

},{}],106:[function(require,module,exports){
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

},{}],107:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isArray = require('./isArray'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var stringTag = '[object String]';

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
}

module.exports = isString;

},{"./_baseGetTag":37,"./isArray":96,"./isObjectLike":106}],108:[function(require,module,exports){
var baseIsTypedArray = require('./_baseIsTypedArray'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;

},{"./_baseIsTypedArray":42,"./_baseUnary":45,"./_nodeUtil":81}],109:[function(require,module,exports){
var arrayLikeKeys = require('./_arrayLikeKeys'),
    baseKeys = require('./_baseKeys'),
    isArrayLike = require('./isArrayLike');

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

},{"./_arrayLikeKeys":32,"./_baseKeys":43,"./isArrayLike":97}],110:[function(require,module,exports){
/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that negates the result of the predicate `func`. The
 * `func` predicate is invoked with the `this` binding and arguments of the
 * created function.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} predicate The predicate to negate.
 * @returns {Function} Returns the new negated function.
 * @example
 *
 * function isEven(n) {
 *   return n % 2 == 0;
 * }
 *
 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
 * // => [1, 3, 5]
 */
function negate(predicate) {
  if (typeof predicate != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  return function() {
    var args = arguments;
    switch (args.length) {
      case 0: return !predicate.call(this);
      case 1: return !predicate.call(this, args[0]);
      case 2: return !predicate.call(this, args[0], args[1]);
      case 3: return !predicate.call(this, args[0], args[1], args[2]);
    }
    return !predicate.apply(this, args);
  };
}

module.exports = negate;

},{}],111:[function(require,module,exports){
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;

},{}],112:[function(require,module,exports){
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;

},{}]},{},[8])(8)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
